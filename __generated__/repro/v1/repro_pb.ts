// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file repro/v1/repro.proto (package repro.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message repro.v1.MyCustomOption
 */
export class MyCustomOption extends Message<MyCustomOption> {
  /**
   * @generated from field: repro.v1.MyCustomOption.MyEnum val = 1;
   */
  val = MyCustomOption_MyEnum.UNSPECIFIED;

  constructor(data?: PartialMessage<MyCustomOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "repro.v1.MyCustomOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "enum", T: proto3.getEnumType(MyCustomOption_MyEnum) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MyCustomOption {
    return new MyCustomOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MyCustomOption {
    return new MyCustomOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MyCustomOption {
    return new MyCustomOption().fromJsonString(jsonString, options);
  }

  static equals(a: MyCustomOption | PlainMessage<MyCustomOption> | undefined, b: MyCustomOption | PlainMessage<MyCustomOption> | undefined): boolean {
    return proto3.util.equals(MyCustomOption, a, b);
  }
}

/**
 * @generated from enum repro.v1.MyCustomOption.MyEnum
 */
export enum MyCustomOption_MyEnum {
  /**
   * @generated from enum value: MY_ENUM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MY_ENUM_FIRST = 1;
   */
  FIRST = 1,

  /**
   * @generated from enum value: MY_ENUM_SECOND = 2;
   */
  SECOND = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(MyCustomOption_MyEnum)
proto3.util.setEnumType(MyCustomOption_MyEnum, "repro.v1.MyCustomOption.MyEnum", [
  { no: 0, name: "MY_ENUM_UNSPECIFIED" },
  { no: 1, name: "MY_ENUM_FIRST" },
  { no: 2, name: "MY_ENUM_SECOND" },
]);

/**
 * @generated from message repro.v1.MyMessage
 */
export class MyMessage extends Message<MyMessage> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<MyMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "repro.v1.MyMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MyMessage {
    return new MyMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MyMessage {
    return new MyMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MyMessage {
    return new MyMessage().fromJsonString(jsonString, options);
  }

  static equals(a: MyMessage | PlainMessage<MyMessage> | undefined, b: MyMessage | PlainMessage<MyMessage> | undefined): boolean {
    return proto3.util.equals(MyMessage, a, b);
  }
}

